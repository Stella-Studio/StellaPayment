from __future__ import annotations
import io
import discord
from typing import Optional
from discord import app_commands
from discord.ext import commands

from utils.utils import EmbedX, vndformat, hasperm, format_amount_time_line


class AdminCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="resetstats", description="Reset th·ªëng k√™ theo kho·∫£ng th·ªùi gian")
    @app_commands.describe(period="ng√†y | tu·∫ßn | th√°ng")
    async def resetstats(self, interaction: discord.Interaction, period: str):
        if not await hasperm(interaction, self.bot):
            return
        await interaction.response.defer(ephemeral=True)
        deleted = await self.bot.db.reset_stats(period)
        await interaction.followup.send(
            embed=EmbedX("üßπ ƒê√£ reset", f"ƒê√£ xo√° `{deleted}` giao d·ªãch trong k·ª≥ `{period}`.", discord.Color.red()),
            ephemeral=True,
        )

    @app_commands.command(name="check", description="Xem t·ªïng v√† l·ªãch s·ª≠ c·ªßa m·ªôt user")
    @app_commands.describe(user="Ng∆∞·ªùi d√πng c·∫ßn ki·ªÉm tra")
    async def check(self, interaction: discord.Interaction, user: discord.User):
        if not await hasperm(interaction, self.bot):
            return
        await interaction.response.defer(ephemeral=True)
        total, count, recent = await self.bot.db.check_user(user.id)
        if not count:
            return await interaction.followup.send(
                embed=EmbedX(":x: Kh√¥ng c√≥ d·ªØ li·ªáu", f"{user.mention} ch∆∞a c√≥ giao d·ªãch.", discord.Color.orange()),
                ephemeral=True,
            )
        lines = []
        for r in recent:
            lines.append(format_amount_time_line(r.get("amount", 0), r.get("timestamp")))
        desc = f"Ng∆∞·ªùi d√πng: {user.mention}\nT·ªïng: `{vndformat(total)}` ‚Äî Giao d·ªãch: `{count}`\n\n" + "\n".join(lines)
        await interaction.followup.send(embed=EmbedX("üîé Ki·ªÉm tra ng∆∞·ªùi d√πng", desc, discord.Color.blurple()), ephemeral=True)

    @app_commands.command(name="export", description="Xu·∫•t CSV l·ªãch s·ª≠ giao d·ªãch m·ªôt th√°ng")
    @app_commands.describe(month="Th√°ng (1-12)", year="NƒÉm (m·∫∑c ƒë·ªãnh: nƒÉm hi·ªán t·∫°i)")
    async def export(self, interaction: discord.Interaction, month: int, year: Optional[int] = None):
        if not await hasperm(interaction, self.bot):
            return
        await interaction.response.defer(ephemeral=True)
        filename, content = await self.bot.db.export_month_csv(month, year)
        await interaction.followup.send(content="CSV xu·∫•t th√†nh c√¥ng", file=discord.File(io.BytesIO(content.encode('utf-8')), filename=filename), ephemeral=True)